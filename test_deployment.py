#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é.
"""

import os
import sys
import subprocess
from pathlib import Path

def check_file_exists(filepath, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    if Path(filepath).exists():
        print(f"‚úÖ {description}")
        return True
    else:
        print(f"‚ùå {description} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_import(module, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è."""
    try:
        __import__(module)
        print(f"‚úÖ {description}")
        return True
    except ImportError:
        print(f"‚ùå {description} - –ú–û–î–£–õ–¨ –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False

def run_django_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç Django –∫–æ–º–∞–Ω–¥—É."""
    try:
        result = subprocess.run(
            f"python manage.py {command}",
            shell=True, 
            capture_output=True, 
            text=True,
            timeout=30
        )
        if result.returncode == 0:
            print(f"‚úÖ {description}")
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print(f"‚ùå {description} - –¢–ê–ô–ú–ê–£–¢")
        return False
    except Exception as e:
        print(f"‚ùå {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("manage.py").exists():
        print("‚ùå –û—à–∏–±–∫–∞: manage.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.")
        sys.exit(1)
    
    tests_passed = 0
    total_tests = 0
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:")
    files_to_check = [
        ("manage.py", "manage.py"),
        ("requirements_production.txt", "requirements_production.txt"),
        ("playandjump/settings_production.py", "settings_production.py"),
        ("playandjump/wsgi.py", "wsgi.py"),
        ("Procfile", "Procfile (–¥–ª—è Heroku)"),
        ("railway.json", "railway.json (–¥–ª—è Railway)"),
        ("Dockerfile", "Dockerfile"),
        ("docker-compose.yml", "docker-compose.yml"),
        ("DEPLOYMENT.md", "DEPLOYMENT.md"),
        (".gitignore", ".gitignore"),
    ]
    
    for filepath, description in files_to_check:
        total_tests += 1
        if check_file_exists(filepath, description):
            tests_passed += 1
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    dependencies = [
        ("django", "Django"),
        ("gunicorn", "Gunicorn"),
        ("whitenoise", "WhiteNoise"),
        ("psycopg2", "psycopg2-binary"),
        ("PIL", "Pillow"),
    ]
    
    for module, description in dependencies:
        total_tests += 1
        if check_import(module, description):
            tests_passed += 1
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Django –∫–æ–º–∞–Ω–¥
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ Django –∫–æ–º–∞–Ω–¥:")
    django_commands = [
        ("check --deploy", "Django check --deploy"),
        ("collectstatic --dry-run", "collectstatic (dry run)"),
        ("makemigrations --check", "makemigrations --check"),
    ]
    
    for command, description in django_commands:
        total_tests += 1
        if run_django_command(command, description):
            tests_passed += 1
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
    directories = [
        ("templates", "templates/"),
        ("static", "static/"),
        ("catalog", "catalog/"),
        ("main", "main/"),
        ("playandjump", "playandjump/"),
    ]
    
    for dirpath, description in directories:
        total_tests += 1
        if Path(dirpath).exists():
            print(f"‚úÖ {description}")
            tests_passed += 1
        else:
            print(f"‚ùå {description} - –ü–ê–ü–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:")
    templates = [
        ("templates/base.html", "base.html"),
        ("templates/index.html", "index.html"),
        ("templates/catalog/index.html", "catalog/index.html"),
    ]
    
    for template_path, description in templates:
        total_tests += 1
        if check_file_exists(template_path, description):
            tests_passed += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - tests_passed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(tests_passed/total_tests)*100:.1f}%")
    
    if tests_passed == total_tests:
        print("\nüéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Å—Ç–∏–Ω–≥ (—Å–º. DEPLOYMENT.md)")
        print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥")
        print("4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("5. –°–æ–∑–¥–∞–π—Ç–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        print("\n‚ö†Ô∏è  –ü–†–û–ï–ö–¢ –ù–ï –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞.")
        sys.exit(1)

if __name__ == "__main__":
    main() 