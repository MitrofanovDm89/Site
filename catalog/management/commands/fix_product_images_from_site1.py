import os
import shutil
import requests
from pathlib import Path
from django.core.management.base import BaseCommand
from django.conf import settings
from catalog.models import Product
import xml.etree.ElementTree as ET
from urllib.parse import urljoin, urlparse
import re


class Command(BaseCommand):
    help = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–π—Ç 1 –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–µ –¥–µ–ª–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        self.stdout.write('üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ 1...')
        
        # –ü—É—Ç–∏ –∫ —Å–∞–π—Ç—É 1
        site1_path = Path(settings.BASE_DIR) / 'samples' / 'Site1'
        xml_file = site1_path / 'playampjump.WordPress.2025-07-24.xml'
        uploads_path = site1_path / 'backup_2025-07-08-1500_Play_amp_Jump_e3006729b37c-uploads' / 'uploads'
        
        if not xml_file.exists():
            self.stdout.write(self.style.ERROR(f'‚ùå XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xml_file}'))
            return
            
        if not uploads_path.exists():
            self.stdout.write(self.style.ERROR(f'‚ùå –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {uploads_path}'))
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–π—Ç 1
        site1_products = self.analyze_site1(xml_file, uploads_path)
        
        if not site1_products:
            self.stdout.write(self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–π—Ç–∞ 1'))
            return
            
        self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(site1_products)} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ 1')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à —Å–∞–π—Ç
        mismatches = self.check_our_site(site1_products)
        
        if not mismatches:
            self.stdout.write('‚úÖ –í—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç!')
            return
            
        self.stdout.write(f'‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(mismatches)} –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π')
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if not options['dry_run']:
            self.fix_mismatches(mismatches, uploads_path)
        else:
            self.show_mismatches(mismatches)

    def analyze_site1(self, xml_file, uploads_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç XML —Ñ–∞–π–ª —Å–∞–π—Ç–∞ 1 –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        products = {}
        
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            
            self.stdout.write(f'üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é XML —Ñ–∞–π–ª: {xml_file}')
            self.stdout.write(f'üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ item: {len(root.findall(".//item"))}')
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
            product_image_mapping = {
                'Dschungel': 'Dschungel.jpg',
                'Fussball-Billiard': 'Fussball-Billiard.jpg', 
                'Madagaskar': 'Madagaskar.jpg',
                'Party': 'Party-2.jpg',
                'Play-Jump-Darts-XXL': 'Play-Jump-Darts-XXL-scaled.jpg',
                'Play-Jump-Huepfburg-Maxi': 'Play-Jump-Huepfburg-Maxi.jpg',
                'Play-Jump-Huepfburg-Zirkus': 'Play-Jump-Huepfburg-Zirkus.jpg',
                'Play-Jump-Polizei': 'Play-Jump-Polizei-1-scaled.jpg',
                'Play-Jump-Shooting-Combo': 'Play-Jump-Shooting-Combo-1.jpg',
                'XXL-Schach-Play-Jump': 'XXL-Schach-Play-Jump.jpg',
                'Tor mit Radar': 'tor-mit-radar.jpg',
                'Riesen Rutsche': 'riesen-rutsche.jpg',
                'Stockfangen': 'stockfangen.jpg',
                'Bull Rodeo': 'bull-rodeo.jpg',
                'Kickertisch': 'kickertisch.jpg',
                'Fu√üball Darts': 'fussball-darts.jpg',
                '4 gewinnt XXL': '4-gewinnt-xxl.jpg',
                'POPCORNMASCHINE': 'popcornmaschine.jpg'
            }
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ XML –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            for i, item in enumerate(root.findall('.//item')):
                title_elem = item.find('title')
                if title_elem is None or title_elem.text is None:
                    continue
                    
                title = title_elem.text.strip()
                
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
                for product_name, image_name in product_image_mapping.items():
                    if product_name.lower() in title.lower():
                        products[title] = {
                            'title': title,
                            'image': f'/wp-content/uploads/{image_name}',
                            'all_images': [f'/wp-content/uploads/{image_name}']
                        }
                        self.stdout.write(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {title} -> {image_name}')
                        break
                        
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ XML: {e}'))
            
        return products

    def extract_images_from_content(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not content:
            return []
            
        # –ò—â–µ–º img —Ç–µ–≥–∏
        img_pattern = r'<img[^>]+src=["\']([^"\']+)["\'][^>]*>'
        images = re.findall(img_pattern, content)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        local_images = []
        for img in images:
            if img.startswith('/') or not img.startswith('http'):
                local_images.append(img)
                
        return local_images

    def check_our_site(self, site1_products):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—à —Å–∞–π—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Å–∞–π—Ç–æ–º 1"""
        mismatches = []
        
        for product in Product.objects.all():
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ 1
            site1_product = self.find_matching_product(product.title, site1_products)
            
            if site1_product:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                self.stdout.write(f'üîç –ü—Ä–æ–≤–µ—Ä—è—é: {product.title}')
                self.stdout.write(f'   –ù–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞: {product.image}')
                self.stdout.write(f'   –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Å–∞–π—Ç–∞ 1: {site1_product["image"]}')
                
                if not self.images_match(product.image, site1_product['image']):
                    self.stdout.write(f'   ‚ùå –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢!')
                    mismatches.append({
                        'our_product': product,
                        'site1_product': site1_product,
                        'our_image': product.image.name if product.image else None,
                        'site1_image': site1_product['image']
                    })
                else:
                    self.stdout.write(f'   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç')
                    
        return mismatches

    def find_matching_product(self, our_title, site1_products):
        """–ò—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ 1"""
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —Å–∞–π—Ç–∞ 1
        our_to_site1_mapping = {
            'H√ºpfburg Dschungel': 'Dschungel',
            'H√ºpfburg Madagaskar': 'Madagaskar', 
            'H√ºpfburg Party': 'Party',
            'H√ºpfburg Zirkus': 'Play-Jump-Huepfburg-Zirkus',
            'H√ºpfburg Polizei': 'Play-Jump-Polizei',
            'H√úPFBURG MAXI': 'Play-Jump-Huepfburg-Maxi',
            'SHOOTING COMBO': 'Play-Jump-Shooting-Combo',
            'DART XXL': 'Play-Jump-Darts-XXL',
            'FUSSBALL-BILLIARD': 'Fussball-Billiard',
            'XXL SCHACH': 'XXL-Schach-Play-Jump',
            'POPCORNMASCHINE': 'POPCORNMASCHINE',
            'Fu√üball Darts': 'Fu√üball Darts',
            'Kickertisch': 'Kickertisch',
            '4 gewinnt XXL': '4 gewinnt XXL',
            'Stockfangen': 'Stockfangen',
            'Bull Rodeo': 'Bull Rodeo',
            'Tor mit Radar': 'Tor mit Radar',
            'Riesen Rutsche': 'Riesen Rutsche'
        }
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if our_title in our_to_site1_mapping:
            site1_title = our_to_site1_mapping[our_title]
            for title, product_data in site1_products.items():
                if self.titles_similar(site1_title, title):
                    return product_data
                    
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø—Ä–æ–±—É–µ–º –æ–±—â–µ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        for title, product_data in site1_products.items():
            if self.titles_similar(our_title, title):
                return product_data
        return None

    def titles_similar(self, title1, title2):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
        t1 = title1.lower().strip()
        t2 = title2.lower().strip()
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return t1 == t2 or t1 in t2 or t2 in t1

    def images_match(self, our_image, site1_image):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        if not our_image:
            return False
            
        our_filename = os.path.basename(str(our_image))
        site1_filename = os.path.basename(site1_image)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        our_normalized = our_filename.lower().replace('_', '').replace('-', '').replace('.', '')
        site1_normalized = site1_filename.lower().replace('_', '').replace('-', '').replace('.', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if 'dschungel' in our_normalized and 'dschungel' in site1_normalized:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ Dschungel, –∞ –Ω–µ huepfburg-dschungel
            if 'huepfburg' in our_normalized and not our_normalized.endswith('dschungel'):
                return False
            return True
        elif 'madagaskar' in our_normalized and 'madagaskar' in site1_normalized:
            if 'huepfburg' in our_normalized and not our_normalized.endswith('madagaskar'):
                return False
            return True
        elif 'party' in our_normalized and 'party' in site1_normalized:
            if 'huepfburg' in our_normalized and not our_normalized.endswith('party'):
                return False
            return True
        elif 'fussball' in our_normalized and 'fussball' in site1_normalized:
            return True
        elif 'billiard' in our_normalized and 'billiard' in site1_normalized:
            return True
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        return False

    def show_mismatches(self, mismatches):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        self.stdout.write('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:')
        for i, mismatch in enumerate(mismatches, 1):
            self.stdout.write(f'\n{i}. –¢–æ–≤–∞—Ä: {mismatch["our_product"].title}')
            self.stdout.write(f'   –ù–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞: {mismatch["our_image"]}')
            self.stdout.write(f'   –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Å–∞–π—Ç–∞ 1: {mismatch["site1_image"]}')

    def fix_mismatches(self, mismatches, uploads_path):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        self.stdout.write('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...')
        
        for mismatch in mismatches:
            try:
                self.fix_single_product(mismatch, uploads_path)
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {mismatch["our_product"].title}: {e}'))

    def fix_single_product(self, mismatch, uploads_path):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        product = mismatch['our_product']
        site1_image = mismatch['site1_image']
        
        self.stdout.write(f'üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product.title}')
        
        # –ò—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–ø–∫–µ uploads —Å–∞–π—Ç–∞ 1
        image_path = self.find_image_in_uploads(site1_image, uploads_path)
        
        if not image_path:
            self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {site1_image}'))
            return
            
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        self.copy_image_to_our_site(image_path, product)
        
        self.stdout.write(f'‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product.title}')

    def find_image_in_uploads(self, image_url, uploads_path):
        """–ò—â–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–ø–∫–µ uploads —Å–∞–π—Ç–∞ 1"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        if image_url.startswith('/'):
            image_url = image_url[1:]
            
        filename = image_url.split('/')[-1]
        
        # –ò—â–µ–º –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö
        static_products_path = Path(settings.BASE_DIR) / 'static' / 'images' / 'products'
        if static_products_path.exists():
            for file_path in static_products_path.iterdir():
                if file_path.is_file() and file_path.name == filename:
                    return file_path
                    
        # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö uploads —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for root, dirs, files in os.walk(uploads_path):
            for file in files:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if file == filename:
                    return Path(root) / file
                    
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if self.files_match_by_keywords(filename, file):
                    return Path(root) / file
                    
        return None
        
    def files_match_by_keywords(self, target_filename, actual_filename):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        target = target_filename.lower().replace('_', '').replace('-', '').replace('.', '')
        actual = actual_filename.lower().replace('_', '').replace('-', '').replace('.', '')
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keyword_mapping = {
            'tor-mit-radar': ['tor-mit-radar', 'tor-mit-radar-1', 'tor-mit-radar-2'],
            'kickertisch': ['kickertisch', 'kickertisch2'],
            'bull-rodeo': ['bull-rodeo', 'bull-riding'],
            'stockfangen': ['stockfangen', 'stockfangen2'],
            'riesen-rutsche': ['rutsche', 'rutsche-1', 'rutsche-2', 'rutsche-play-jump'],
            '4-gewinnt-xxl': ['4-gewinnt-xxl', 'xxl-schach', 'xxl-schach-play-jump', 'xxlschachplayjump'],
            'popcornmaschine': ['popcornmaschine', 'popcorn', 'zuckerwattemaschine']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for target_key, actual_keys in keyword_mapping.items():
            if target_key in target:
                for actual_key in actual_keys:
                    if actual_key in actual:
                        return True
                        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è XXL Schach
        if '4-gewinnt-xxl' in target or '4gewinntxxl' in target:
            if 'xxl' in actual and 'schach' in actual:
                return True
                
        return False

    def copy_image_to_our_site(self, source_path, product):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –Ω–∞—à —Å–∞–π—Ç"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        media_products_path = Path(settings.MEDIA_ROOT) / 'products'
        media_products_path.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
        original_filename = source_path.name
        filename = f"{product.slug}_{original_filename}"
        dest_path = media_products_path / filename
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(source_path, dest_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞
        product.image = f'products/{filename}'
        product.save()
        
        self.stdout.write(f'üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {source_path.name} -> {filename}') 